[{"C:\\Users\\LENOVO\\Downloads\\chat-app-master\\chat-app-master\\Chat App\\client\\src\\index.js":"1","C:\\Users\\LENOVO\\Downloads\\chat-app-master\\chat-app-master\\Chat App\\client\\src\\App.js":"2","C:\\Users\\LENOVO\\Downloads\\chat-app-master\\chat-app-master\\Chat App\\client\\src\\reportWebVitals.js":"3","C:\\Users\\LENOVO\\Downloads\\chat-app-master\\chat-app-master\\Chat App\\client\\src\\modules\\Form\\index.js":"4","C:\\Users\\LENOVO\\Downloads\\chat-app-master\\chat-app-master\\Chat App\\client\\src\\modules\\Dashboard\\index.js":"5","C:\\Users\\LENOVO\\Downloads\\chat-app-master\\chat-app-master\\Chat App\\client\\src\\components\\Button\\index.js":"6","C:\\Users\\LENOVO\\Downloads\\chat-app-master\\chat-app-master\\Chat App\\client\\src\\components\\Input\\index.js":"7"},{"size":584,"mtime":1679816614000,"results":"8","hashOfConfig":"9"},{"size":1049,"mtime":1679816614000,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1679816614000,"results":"11","hashOfConfig":"9"},{"size":2782,"mtime":1679816614000,"results":"12","hashOfConfig":"9"},{"size":10839,"mtime":1722401968775,"results":"13","hashOfConfig":"9"},{"size":443,"mtime":1722370375419,"results":"14","hashOfConfig":"9"},{"size":695,"mtime":1679816614000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dykb2k",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\LENOVO\\Downloads\\chat-app-master\\chat-app-master\\Chat App\\client\\src\\index.js",[],[],"C:\\Users\\LENOVO\\Downloads\\chat-app-master\\chat-app-master\\Chat App\\client\\src\\App.js",[],[],"C:\\Users\\LENOVO\\Downloads\\chat-app-master\\chat-app-master\\Chat App\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\LENOVO\\Downloads\\chat-app-master\\chat-app-master\\Chat App\\client\\src\\modules\\Form\\index.js",[],[],"C:\\Users\\LENOVO\\Downloads\\chat-app-master\\chat-app-master\\Chat App\\client\\src\\modules\\Dashboard\\index.js",["38","39","40","41","42","43","44","45","46","47"],[],"import { useEffect, useRef, useState } from \"react\";\nimport Img1 from \"../../assets/img1.jpg\";\nimport tutorialsdev from \"../../assets/tutorialsdev.png\";\nimport Input from \"../../components/Input\";\nimport { io } from \"socket.io-client\";\n\nconst Dashboard = () => {\n  const [user, setUser] = useState(\n    JSON.parse(localStorage.getItem(\"user:detail\"))\n  );\n  const [conversations, setConversations] = useState([]);\n  const [messages, setMessages] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const [users, setUsers] = useState([]);\n  const [images, setImages] = useState([]);\n  const [videos, setVideos] = useState([]);\n  const [socket, setSocket] = useState(null);\n  const displayImage = (filename) =>\n    `http://localhost:8000/uploads/${filename}`;\n\n  const messageRef = useRef(null);\n\n  useEffect(() => {\n    const newSocket = io(\"http://localhost:8080\");\n    setSocket(newSocket);\n    return () => newSocket.close();\n  }, []);\n\n  useEffect(() => {\n    if (socket) {\n      socket.emit(\"addUser\", user?.id);\n\n      socket.on(\"getUsers\", (users) => {\n        console.log(\"Active Users: \", users);\n        setUsers(users); // Update users state with active users\n      });\n\n      socket.on(\"getMessage\", (data) => {\n        setMessages((prev) => ({\n          ...prev,\n          messages: [\n            ...prev.messages,\n            { user: data.user, message: data.message },\n          ],\n        }));\n      });\n    }\n  }, [socket, user]);\n\n  useEffect(() => {\n    messageRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages?.messages]);\n\n  useEffect(() => {\n    const fetchConversations = async () => {\n      try {\n        const res = await fetch(\n          `http://localhost:8000/api/conversations/${user?.id}`\n        );\n        if (!res.ok) throw new Error(\"Failed to fetch conversations\");\n        const resData = await res.json();\n        setConversations(resData);\n      } catch (error) {\n        console.error(\"Error fetching conversations:\", error);\n      }\n    };\n    fetchConversations();\n  }, [user?.id]);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const res = await fetch(`http://localhost:8000/api/users/${user?.id}`);\n        if (!res.ok) throw new Error(\"Failed to fetch users\");\n        const resData = await res.json();\n        setUsers(resData);\n      } catch (error) {\n        console.error(\"Error fetching users:\", error);\n      }\n    };\n    fetchUsers();\n  }, [user?.id]);\n\n  const fetchMessages = async (conversationId, receiver) => {\n    try {\n      const res = await fetch(\n        `http://localhost:8000/api/message/${conversationId}?senderId=${user?.id}&receiverId=${receiver?.receiverId}`\n      );\n      if (!res.ok) throw new Error(\"Failed to fetch messages\");\n      const resData = await res.json();\n      setMessages({ messages: resData, receiver, conversationId });\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n    }\n  };\n\n  const handleFileUpload = async (event, type) => {\n    const files = Array.from(event.target.files);\n    if (files.length === 0) return;\n\n    const formData = new FormData();\n    files.forEach((file) => {\n      formData.append(\"files\", file);\n    });\n\n    try {\n      const uploadRes = await fetch(`http://localhost:8000/api/upload`, {\n        method: \"POST\",\n        body: formData,\n      });\n      if (!uploadRes.ok) throw new Error(\"Failed to upload files\");\n      const uploadData = await uploadRes.json();\n\n      if (type === \"image\") {\n        setImages((prev) => [...prev, ...files]);\n      } else if (type === \"video\") {\n        setVideos((prev) => [...prev, ...files]);\n      }\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n    }\n  };\n\n  const triggerFileInput = (type) => {\n    document.querySelector(`#file-input-${type}`).click();\n  };\n\n  const sendMessage = async () => {\n    if (!message && images.length === 0 && videos.length === 0) {\n      return; // Do nothing if there's no message or files to send\n    }\n\n    const messageContent = {\n      senderId: user?.id,\n      receiverId: messages?.receiver?.receiverId,\n      message: message || \"\",\n      conversationId: messages?.conversationId,\n      images,\n      videos,\n    };\n\n    try {\n      socket.emit(\"sendMessage\", messageContent);\n\n      await fetch(`http://localhost:8000/api/message`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(messageContent),\n      });\n\n      setMessage(\"\");\n      setImages([]);\n      setVideos([]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n\n  return (\n    <div className=\"w-screen flex\">\n      <div className=\"w-[25%] h-screen bg-secondary overflow-scroll\">\n        <div className=\"flex items-center my-8 mx-14\">\n          <div>\n            <img\n              src={tutorialsdev}\n              width={75}\n              height={75}\n              className=\"border border-primary p-[2px] rounded-full\"\n            />\n          </div>\n          <div className=\"ml-8\">\n            <h3 className=\"text-2xl\">{user?.fullName}</h3>\n            <p className=\"text-lg font-light\">My Account</p>\n          </div>\n        </div>\n        <hr />\n        <div className=\"mx-14 mt-10\">\n          <div className=\"text-primary text-lg\">Messages</div>\n          <div>\n            {conversations.length > 0 ? (\n              conversations.map(({ conversationId, user }) => (\n                <div\n                  className=\"flex items-center py-8 border-b border-b-gray-300\"\n                  key={conversationId}\n                  onClick={() => fetchMessages(conversationId, user)}\n                >\n                  <div className=\"cursor-pointer flex items-center\">\n                    <div>\n                      <img\n                        src={Img1}\n                        className=\"w-[60px] h-[60px] rounded-full p-[2px] border border-primary\"\n                      />\n                    </div>\n                    <div className=\"ml-6\">\n                      <h3 className=\"text-lg font-semibold\">\n                        {user?.fullName}\n                      </h3>\n                      <p className=\"text-sm font-light text-gray-600\">\n                        {user?.email}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center text-lg font-semibold mt-24\">\n                No Conversations\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"w-[50%] h-screen bg-white flex flex-col items-center\">\n        {messages?.receiver?.fullName && (\n          <div className=\"w-[75%] bg-secondary h-[80px] my-14 rounded-full flex items-center px-14 py-2\">\n            <div className=\"cursor-pointer\">\n              <img src={Img1} width={60} height={60} className=\"rounded-full\" />\n            </div>\n            <div className=\"ml-6 mr-auto\">\n              <h3 className=\"text-lg\">{messages?.receiver?.fullName}</h3>\n              <p className=\"text-sm font-light text-gray-600\">\n                {messages?.receiver?.email}\n              </p>\n            </div>\n            <div className=\"cursor-pointer flex items-center\">\n              <img src={tutorialsdev} width={30} height={30} />\n              <div className=\"ml-2\">Logout</div>\n            </div>\n          </div>\n        )}\n        <div className=\"w-[75%] h-[70%] bg-white overflow-scroll\">\n          <div className=\"w-full p-14\">\n            {messages?.messages?.length > 0 ? (\n              messages?.messages.map(({ user, message }, index) => (\n                <div\n                  className={`flex items-center mb-4 ${\n                    user?.id === user?.id ? \"justify-end\" : \"justify-start\"\n                  }`}\n                  key={index}\n                >\n                  <div\n                    className={`py-2 px-4 rounded-xl ${\n                      user?.id === user?.id\n                        ? \"bg-primary text-white\"\n                        : \"bg-gray-100 text-gray-800\"\n                    }`}\n                  >\n                    {message}\n                  </div>\n                  <div ref={messageRef} />\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center font-semibold text-lg mt-24\">\n                No Messages\n              </div>\n            )}\n          </div>\n        </div>\n        {messages?.receiver?.fullName && (\n          <div className=\"w-full flex items-center px-14 mt-6\">\n            <Input\n              className=\"w-[75%]\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              placeholder=\"Type a message\"\n            />\n            <button\n              className=\"ml-8 py-4 px-8 rounded-full bg-primary shadow-sm text-white\"\n              onClick={sendMessage}\n            >\n              Send\n            </button>\n            <div className=\"ml-8\">\n              <input\n                type=\"file\"\n                id=\"file-input-image\"\n                accept=\"image/*\"\n                onChange={(e) => handleFileUpload(e, \"image\")}\n                style={{ display: \"none\" }}\n              />\n              <button\n                className=\"py-2 px-4 rounded-full bg-secondary shadow-sm\"\n                onClick={() => triggerFileInput(\"image\")}\n              >\n                Upload Image\n              </button>\n            </div>\n            <div className=\"ml-8\">\n              <input\n                type=\"file\"\n                id=\"file-input-video\"\n                accept=\"video/*\"\n                onChange={(e) => handleFileUpload(e, \"video\")}\n                style={{ display: \"none\" }}\n              />\n              <button\n                className=\"py-2 px-4 rounded-full bg-secondary shadow-sm\"\n                onClick={() => triggerFileInput(\"video\")}\n              >\n                Upload Video\n              </button>\n            </div>\n          </div>\n        )}\n        <div className=\"w-full flex flex-wrap p-14\">\n          {images.length > 0 &&\n            images.map((image, index) => (\n              <img\n                key={index}\n                src={URL.createObjectURL(image)}\n                alt=\"Uploaded\"\n                className=\"w-[100px] h-[100px] m-2\"\n              />\n            ))}\n          {videos.length > 0 &&\n            videos.map((video, index) => (\n              <video\n                key={index}\n                src={URL.createObjectURL(video)}\n                controls\n                className=\"w-[200px] h-[150px] m-2\"\n              />\n            ))}\n        </div>\n      </div>\n      <div className=\"w-[25%] h-screen bg-secondary\"></div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","C:\\Users\\LENOVO\\Downloads\\chat-app-master\\chat-app-master\\Chat App\\client\\src\\components\\Button\\index.js",[],[],"C:\\Users\\LENOVO\\Downloads\\chat-app-master\\chat-app-master\\Chat App\\client\\src\\components\\Input\\index.js",[],[],{"ruleId":"48","severity":1,"message":"49","line":8,"column":16,"nodeType":"50","messageId":"51","endLine":8,"endColumn":23},{"ruleId":"48","severity":1,"message":"52","line":14,"column":10,"nodeType":"50","messageId":"51","endLine":14,"endColumn":15},{"ruleId":"48","severity":1,"message":"53","line":18,"column":9,"nodeType":"50","messageId":"51","endLine":18,"endColumn":21},{"ruleId":"48","severity":1,"message":"54","line":112,"column":13,"nodeType":"50","messageId":"51","endLine":112,"endColumn":23},{"ruleId":"55","severity":1,"message":"56","line":166,"column":13,"nodeType":"57","endLine":171,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":191,"column":23,"nodeType":"57","endLine":194,"endColumn":25},{"ruleId":"55","severity":1,"message":"56","line":219,"column":15,"nodeType":"57","endLine":219,"endColumn":81},{"ruleId":"55","severity":1,"message":"56","line":228,"column":15,"nodeType":"57","endLine":228,"endColumn":64},{"ruleId":"58","severity":1,"message":"59","line":239,"column":21,"nodeType":"60","messageId":"61","endLine":239,"endColumn":42},{"ruleId":"58","severity":1,"message":"59","line":245,"column":23,"nodeType":"60","messageId":"61","endLine":245,"endColumn":44},"no-unused-vars","'setUser' is assigned a value but never used.","Identifier","unusedVar","'users' is assigned a value but never used.","'displayImage' is assigned a value but never used.","'uploadData' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf"]